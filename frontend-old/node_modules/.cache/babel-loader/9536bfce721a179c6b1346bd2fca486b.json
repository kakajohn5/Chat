{"ast":null,"code":"import { REGISTER_FAIL, REGISTER_SUCCESS, SUCCESS_MESSAGE_CLEAR, ERROR_CLEAR, USER_LOGIN_FAIL, USER_LOGIN_SUCCESS, LOGOUT_SUCCESS } from \"../types/authType\";\nimport deCodeToken from 'jwt-decode';\nconst authState = {\n  loading: true,\n  authenticate: false,\n  error: '',\n  successMessage: '',\n  myInfo: ''\n};\n\nconst tokenDecode = token => {\n  const tokenDecoded = deCodeToken(token);\n  const expTime = new Date(tokenDecoded.exp * 1000);\n\n  if (new Date() > expTime) {\n    return null;\n  }\n\n  return tokenDecoded;\n};\n\nconst getToken = localStorage.getItem('authToken');\n\nif (getToken) {\n  const getInfo = tokenDecode(getToken);\n\n  if (getInfo) {\n    authState.myInfo = getInfo;\n    authState.authenticate = true;\n    authState.loading = false;\n  }\n}\n\nconsole.log(getToken);\nexport const authReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : authState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  const {\n    payload,\n    type\n  } = action;\n\n  if (type === REGISTER_FAIL || type === USER_LOGIN_FAIL) {\n    return { ...state,\n      error: payload.error,\n      authenticate: false,\n      myInfo: '',\n      loading: true\n    };\n  }\n\n  if (type === REGISTER_SUCCESS || type === USER_LOGIN_SUCCESS) {\n    const myInfo = tokenDecode(payload.token);\n    return { ...state,\n      myInfo: myInfo,\n      successMessage: payload.successMessage,\n      error: '',\n      authenticate: true,\n      loading: false\n    };\n  }\n\n  if (type === SUCCESS_MESSAGE_CLEAR) {\n    return { ...state,\n      successMessage: ''\n    };\n  }\n\n  if (type === ERROR_CLEAR) {\n    return { ...state,\n      error: ''\n    };\n  }\n\n  if (type === 'LOGOUT_SUCCESS') {\n    return { ...state,\n      authenticate: false,\n      myInfo: '',\n      successMessage: 'Logout Successfull'\n    };\n  }\n\n  return state;\n};","map":{"version":3,"sources":["C:/Users/gameo/Chat/frontend-old/src/store/reducers/authReducer.js"],"names":["REGISTER_FAIL","REGISTER_SUCCESS","SUCCESS_MESSAGE_CLEAR","ERROR_CLEAR","USER_LOGIN_FAIL","USER_LOGIN_SUCCESS","LOGOUT_SUCCESS","deCodeToken","authState","loading","authenticate","error","successMessage","myInfo","tokenDecode","token","tokenDecoded","expTime","Date","exp","getToken","localStorage","getItem","getInfo","console","log","authReducer","state","action","payload","type"],"mappings":"AAAA,SAASA,aAAT,EAAuBC,gBAAvB,EAAwCC,qBAAxC,EAA8DC,WAA9D,EAA0EC,eAA1E,EAA0FC,kBAA1F,EAA6GC,cAA7G,QAAmI,mBAAnI;AACA,OAAOC,WAAP,MAAwB,YAAxB;AAEA,MAAMC,SAAS,GAAG;AACbC,EAAAA,OAAO,EAAG,IADG;AAEbC,EAAAA,YAAY,EAAG,KAFF;AAGbC,EAAAA,KAAK,EAAG,EAHK;AAIbC,EAAAA,cAAc,EAAE,EAJH;AAKbC,EAAAA,MAAM,EAAG;AALI,CAAlB;;AAQA,MAAMC,WAAW,GAAIC,KAAD,IAAU;AACzB,QAAMC,YAAY,GAAGT,WAAW,CAACQ,KAAD,CAAhC;AACA,QAAME,OAAO,GAAG,IAAIC,IAAJ,CAASF,YAAY,CAACG,GAAb,GAAiB,IAA1B,CAAhB;;AACA,MAAG,IAAID,IAAJ,KAAaD,OAAhB,EAAwB;AACnB,WAAO,IAAP;AACJ;;AACD,SAAOD,YAAP;AAEJ,CARD;;AAUA,MAAMI,QAAQ,GAAGC,YAAY,CAACC,OAAb,CAAqB,WAArB,CAAjB;;AACA,IAAGF,QAAH,EAAY;AACP,QAAMG,OAAO,GAAGT,WAAW,CAACM,QAAD,CAA3B;;AACA,MAAGG,OAAH,EAAW;AACNf,IAAAA,SAAS,CAACK,MAAV,GAAmBU,OAAnB;AACAf,IAAAA,SAAS,CAACE,YAAV,GAAyB,IAAzB;AACAF,IAAAA,SAAS,CAACC,OAAV,GAAoB,KAApB;AACJ;AACL;;AACDe,OAAO,CAACC,GAAR,CAAYL,QAAZ;AAEA,OAAO,MAAMM,WAAW,GAAG,YAA+B;AAAA,MAA9BC,KAA8B,uEAAtBnB,SAAsB;AAAA,MAAXoB,MAAW;AACrD,QAAM;AAACC,IAAAA,OAAD;AAASC,IAAAA;AAAT,MAAiBF,MAAvB;;AAEA,MAAGE,IAAI,KAAK9B,aAAT,IAA0B8B,IAAI,KAAK1B,eAAtC,EAAsD;AACjD,WAAO,EACF,GAAGuB,KADD;AAEFhB,MAAAA,KAAK,EAAGkB,OAAO,CAAClB,KAFd;AAGFD,MAAAA,YAAY,EAAG,KAHb;AAIFG,MAAAA,MAAM,EAAG,EAJP;AAKFJ,MAAAA,OAAO,EAAG;AALR,KAAP;AAOJ;;AAED,MAAGqB,IAAI,KAAK7B,gBAAT,IAA6B6B,IAAI,KAAKzB,kBAAzC,EAA4D;AACvD,UAAMQ,MAAM,GAAGC,WAAW,CAACe,OAAO,CAACd,KAAT,CAA1B;AACA,WAAM,EACD,GAAGY,KADF;AAEDd,MAAAA,MAAM,EAAGA,MAFR;AAGDD,MAAAA,cAAc,EAAGiB,OAAO,CAACjB,cAHxB;AAIDD,MAAAA,KAAK,EAAG,EAJP;AAKDD,MAAAA,YAAY,EAAG,IALd;AAMDD,MAAAA,OAAO,EAAE;AANR,KAAN;AAUJ;;AAGD,MAAGqB,IAAI,KAAK5B,qBAAZ,EAAkC;AAC7B,WAAO,EACF,GAAGyB,KADD;AAEFf,MAAAA,cAAc,EAAG;AAFf,KAAP;AAIJ;;AAED,MAAGkB,IAAI,KAAK3B,WAAZ,EAAwB;AACnB,WAAO,EACF,GAAGwB,KADD;AAEFhB,MAAAA,KAAK,EAAG;AAFN,KAAP;AAIJ;;AAGD,MAAGmB,IAAI,KAAK,gBAAZ,EAA6B;AACxB,WAAO,EACF,GAAGH,KADD;AAEFjB,MAAAA,YAAY,EAAG,KAFb;AAGFG,MAAAA,MAAM,EAAG,EAHP;AAIFD,MAAAA,cAAc,EAAE;AAJd,KAAP;AAOJ;;AAGD,SAAOe,KAAP;AACJ,CAvDM","sourcesContent":["import { REGISTER_FAIL,REGISTER_SUCCESS,SUCCESS_MESSAGE_CLEAR,ERROR_CLEAR,USER_LOGIN_FAIL,USER_LOGIN_SUCCESS,LOGOUT_SUCCESS } from \"../types/authType\";\r\nimport deCodeToken from 'jwt-decode';\r\n\r\nconst authState = {\r\n     loading : true,\r\n     authenticate : false,\r\n     error : '',\r\n     successMessage: '',\r\n     myInfo : ''\r\n}\r\n\r\nconst tokenDecode = (token) =>{\r\n     const tokenDecoded = deCodeToken(token);\r\n     const expTime = new Date(tokenDecoded.exp*1000);\r\n     if(new Date() > expTime){\r\n          return null;\r\n     }\r\n     return tokenDecoded;\r\n\r\n}\r\n\r\nconst getToken = localStorage.getItem('authToken');\r\nif(getToken){\r\n     const getInfo = tokenDecode(getToken);\r\n     if(getInfo){\r\n          authState.myInfo = getInfo;\r\n          authState.authenticate = true;\r\n          authState.loading = false;\r\n     }\r\n}\r\nconsole.log(getToken);\r\n\r\nexport const authReducer = (state = authState, action) => {\r\n     const {payload,type} = action;\r\n\r\n     if(type === REGISTER_FAIL || type === USER_LOGIN_FAIL){\r\n          return {\r\n               ...state,\r\n               error : payload.error,\r\n               authenticate : false,\r\n               myInfo : '',\r\n               loading : true\r\n          }\r\n     }\r\n\r\n     if(type === REGISTER_SUCCESS || type === USER_LOGIN_SUCCESS){\r\n          const myInfo = tokenDecode(payload.token);\r\n          return{\r\n               ...state,\r\n               myInfo : myInfo,\r\n               successMessage : payload.successMessage,\r\n               error : '',\r\n               authenticate : true,\r\n               loading: false\r\n\r\n          }\r\n\r\n     } \r\n\r\n\r\n     if(type === SUCCESS_MESSAGE_CLEAR){\r\n          return {\r\n               ...state,\r\n               successMessage : ''\r\n          }\r\n     }\r\n\r\n     if(type === ERROR_CLEAR){\r\n          return {\r\n               ...state,\r\n               error : ''\r\n          }\r\n     }\r\n\r\n\r\n     if(type === 'LOGOUT_SUCCESS'){\r\n          return {\r\n               ...state,\r\n               authenticate : false,\r\n               myInfo : '',\r\n               successMessage: 'Logout Successfull',\r\n              \r\n          }\r\n     }\r\n\r\n\r\n     return state;\r\n}"]},"metadata":{},"sourceType":"module"}